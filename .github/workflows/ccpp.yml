name: C/C++ CI

on:
  push:
  pull_request:
    types: [assigned]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        distro: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.distro }}
    
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
        fetch-depth: 0
    - name: install libudev-dev
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev
    - name: cmake
      run: cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_PYTHON_API=1 .
    - name: make
      run: make VERBOSE=1 -j2
    - name: make package
      run: make package
    - name: rename
      if: ${{ !(matrix.distro == 'ubuntu-22.04') }}
      run: for f in packages/*.deb; do mv $f ${f%.deb}_${{ matrix.distro }}.deb; done
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: packages
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'develop')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./packages/*
        tag: develop
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'main')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./packages/*
        tag: main
    - name: cmake2
      run: cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=artifacts -DINSTALL_COMPLETION=off .
    - name: make2
      run: make VERBOSE=1 -j2
    - name: test
      run: make test
    - name: make install
      run: make install
    - name: archive
      run: tar -czf artifacts_${{ matrix.distro }}.tgz artifacts/ 
    - name: Archive production artifacts2
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: artifacts_${{ matrix.distro }}.tgz
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'develop')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./artifacts_${{ matrix.distro }}.tgz
        tag: develop
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'main')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./artifacts_${{ matrix.distro }}.tgz
        tag: main

  build_arm:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04
          - arch: armv6
            distro: buster
          - arch: armv7
            distro: buster
    steps:
    - uses: actions/checkout@master
      with:
        submodules: true
        fetch-depth: 0
    - uses: uraimo/run-on-arch-action@master
      name: Run commands
      id: runcmd
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}
        githubToken: ${{ github.token }}
        setup: |
          mkdir -p "${PWD}/packages"
        dockerRunArgs: |
          --volume "${PWD}/packages:/packages"
        run: |
          git config --global --add safe.directory /home/runner/work/motor-realtime/motor-realtime
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON_API=1 .
          make -j2
          make package
        install: |
          apt-get update -q -y
          apt-get install -y cmake build-essential libudev-dev git python3-dev
          if [ ${{ matrix.distro }} = "buster" ]; then
            # cmake 3.16 has problems
            apt-get remove -y cmake-data
            apt-get install -y cmake-data=3.13.4-1 cmake=3.13.4-1
          fi
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: packages
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'develop')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./packages/*
        tag: develop
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'main')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./packages/*
        tag: main
    - uses: uraimo/run-on-arch-action@master
      name: Run commands2
      id: runcmd2
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}
        githubToken: ${{ github.token }}
        setup: |
          mkdir -p "${PWD}/packages"
        dockerRunArgs: |
          --volume "${PWD}/packages:/packages"
        run: |
          git config --global --add safe.directory /home/runner/work/motor-realtime/motor-realtime
          # Note switched build type from RelWithDebInfo to Debug to fix pthread_create missing issued on
          # aarch64 ubuntu18.04 build
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=artifacts -DINSTALL_COMPLETION=off .
          make -j2 VERBOSE=1
          make install
        install: |
          apt-get update -q -y
          apt-get install -y cmake build-essential libudev-dev git python3-dev
          if [ ${{ matrix.distro }} = "buster" ]; then
            # cmake 3.16 has problems
            apt-get remove -y cmake-data
            apt-get install -y cmake-data=3.13.4-1 cmake=3.13.4-1
          fi
    - name: archive2
      run: tar -czf artifacts_${{ matrix.distro }}_${{ matrix.arch }}.tgz artifacts/ 
    - name: Archive production artifacts2
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: artifacts_${{ matrix.distro }}_${{ matrix.arch }}.tgz
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'develop')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./artifacts_${{ matrix.distro }}_${{ matrix.arch }}.tgz
        tag: develop
    - uses: pyTooling/Actions/releaser@main
      if: contains(github.ref, 'main')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./artifacts_${{ matrix.distro }}_${{ matrix.arch }}.tgz
        tag: main

  test:
    timeout-minutes: 10
    needs: [build]
    runs-on: [self-hosted, motor_enc]

    strategy:
      fail-fast: false
      matrix:
        distro: [ubuntu-20.04, ubuntu-22.04]

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifacts
    - name: test
      run: |
        ls
        tar xzf artifacts_${{ matrix.distro }}.tgz
        cd artifacts/
        ./bin/motor_util
        ./bin/motor_util --set-timeout 10
        ./bin/motor_util -l
        ./bin/motor_util -l | grep Board\ name
        ./bin/motor_util -l | grep motor
        ./bin/motor_util -u
        ./bin/motor_util -u -l
        ./bin/motor_util -u -l | grep Board\ name
        ./bin/motor_util -u -l | grep motor

        # [ $(./bin/motor_util -p 1-3.1 | wc -l) -eq 4 ]
        # [ $(./bin/motor_util -p 1-3.1 --no-list | wc -l) -eq 0 ]
        dfu-util -e -p 1-3.1 || true
        sleep 1
        ./bin/motor_util | grep "dfu device"
        /usr/share/motor-realtime/scripts/dfu_leave_all.sh
        sleep 2
        ! ./bin/motor_util | grep "dfu device"

        time ./bin/motor_util

        cd share/motor-realtime
        PYTHONPATH=. ./python/example.py
        
